#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib', __FILE__)

require 'rubygems'
require 'jireport'
require 'yaml'
require 'logger'
require 'ostruct'

require 'active_support/time'

include JiReport

STYLE_CONFIG = {
  header_alignment: {
    alignment: {
      horizontal: :center,
      vertical: :center,
      wrap_text: true
    }
  },
  data_alignment: {
    alignment: {
      horizontal: :left,
      vertical: :center,
      wrap_text: true
    }
  },
  header_color: {
    bg_color: 'fefe98',
    b: true,
    locked: true,
    border: { style: :thin, color: '00'}
  },
  username_color: {
    fg_color: 'ff0000',
    b: true,
    locked: true
  }
}

REPORT_METADATA = begin
  short_report_columns = [
    {
      :source => [:user, :fullname],
      :header => 'Name',
      :width => 20
    },
    {
      :header => 'Project',
      :width => 8
    },
    {
      :source => [:issue, :key],
      :header => 'Task ID',
      :width => 17
    },
    {
      :header => "Task Completion Date (per MS Project)",
      :source => [:issue, :empty],
      :width => 15
    },
    {
      :source => [:issue, :percent],
      :header => '%',
      :width => 5
    },
    {
      :source => [:issue, :empty],
      :header => "ETA for completion",
      :width => 15
    }
  ]

  detailed = Array.new short_report_columns
  detailed[-3...-3] = [
    {
      :source => [:issue, :summary],
      :header => 'Task Desc',
      :width => 60
    }
  ]
  detailed[-2...-2] = [
    {
      :source => [:issue, :start_date],
      :header => 'Start date',
      :width => 15
    },
    {
      :source => [:issue, :end_date],
      :header => 'End date',
      :width => 15
    }
  ]

  detailed.push({
    :source => [:issue, :description],
    :header => 'Status',
    :width => 15
  },{
    :source => [:issue, :empty],
    :header => 'Issues',
    :width => 45
  },{
    :source => [:issue, :empty],
    :header => "Risks/Mitigation Plans",
    :width => 45
  })

  detailed_style = STYLE_CONFIG.dup
  detailed_style[:username_color] = STYLE_CONFIG[:username_color].dup
  detailed_style[:username_color][:bg_color] = "c2d1f0"
  detailed_style[:username_color][:full_row] = true
  [
    {
      :title => 'Short report',
      :columns => short_report_columns,
      :style => STYLE_CONFIG
    },
    {
      :title => 'Detailed report',
      :columns => detailed,
      :style => detailed_style
    }
  ]
end
MGMT_SHEET = {
  :title => "Management",
  :no_data => true,
  :columns => [
               {
                 :source => [:user, :fullname],
                 :header => "Name",
                 :width => 20
               },{
                 :header => "Vac/Ill",
                 :width => 15,
                 :value => "none"
               },{
                 :header => "On Track",
                 :width => 5,
                 :value => "Y"
               },{
                 :header => "Delay Details",
                 :width => 15
               },{
                 :header => "Recovery Plan",
                 :width => 15
               },{
                 :header => "Comments",
                 :width => 25
               }
              ],
  :style => STYLE_CONFIG
}

ROOT = File.expand_path('../..', __FILE__)

def report name, from_date, to_date, format, upload_to_google
  tmp_path = "#{ROOT}/tmp"
  log_path = "#{ROOT}/log"

  [tmp_path, log_path].each do |path|
    Dir.mkdir path unless File.exist? path
  end

  log = Logger.new(
    File.open("#{log_path}/report.log", 'a')
  )
  log.info "--- started ---"

  log.info "reading config/database.yml"
  db_conf = YAML::load File.open "#{ROOT}/config/database.yml"

  log.info "establishing connection with db"
  ActiveRecord::Base.establish_connection db_conf

  log.info "reading config/fetch.yml"
  conf = YAML::load File.open "#{ROOT}/config/fetch.yml"

  if upload_to_google
    log.info "reading config/google_auth.yml"
    google_conf = YAML::load File.open "#{ROOT}/config/google_auth.yml"
  end

  log.info "gathering report data"
  now = Time.now
  data = []
  conf['users'].each do |user, fullname|
    issues = Issue.where(:assignee => user,
                         :updated_at => from_date..to_date)
    issues.each do |i|
      i.summary = i.summary
      i.ended_at ||= now
    end
    data << [OpenStruct.new({ :fullname => fullname }), issues]
  end

  if format == :ods
    log.info "generating ods data"
    templ_path = "#{ROOT}/config/template.ods"
    tmp_file = "#{tmp_path}/#{name}.ods"
    OdsTemplateFormatter.generate templ_path, tmp_file, REPORT_METADATA, data
  elsif format == :xlsx
    doc = ExportXlsx.new([MGMT_SHEET, REPORT_METADATA].flatten, data)
    doc.save "#{tmp_path}/#{name}.xlsx"
  end

  if upload_to_google
    log.info "sending report to google"
    g_cnf = google_conf
    uploader_output = %x[bin/ods_to_google --login='#{g_cnf['login']}' --passwd='#{g_cnf['password']}' --name='#{name}' --format='#{format.to_s}']
    ret = $?
    uploader_output.split('\n').each do |l|
      log.info "  |#{l}"
    end
    raise StandardError, "bin/ods_to_google returned #{$?}" unless ret == 0
    log.info "--- finished successfully ---"
  end
rescue StandardError => e
  msg = e.to_log
  STDERR.print msg
  log.error msg
end

USAGE = 'USAGE: report report_name from_date to_date [format] [upload_to_google]'

if ARGV.size < 3
  puts USAGE
  exit 1
end

TIME_FMT = '%Y-%m-%d'

from = Time.parse(ARGV[1], TIME_FMT)
to = Time.parse(ARGV[2], TIME_FMT) + 1.day

format = case ARGV[3]
         when "xlsx"
           :xlsx
         else
           :ods
         end
upload_to_google = ARGV[4] == "true" || false

report ARGV[0], from, to, format, upload_to_google
