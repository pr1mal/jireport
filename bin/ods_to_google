#!/usr/bin/env python
import os, sys
import getopt
import atom.data
import gdata.client
import gdata.data
import gdata.gauth
import gdata.docs.client
import gdata.docs.data
import gdata.docs.service

APP_NAME = 'OurIBReportUploader-v0.1'

class ODS2GDocsUploader(object):
  """Setup resumable upload 'coz regular client.Upload does not work for our reports :(
  NOTE: this file is almost fully copy-pasted from resumable_upload_sample.py example shipped with python-gdata package, so credits go to its author
  """

  CREATE_SESSION_URI = '/feeds/upload/create-session/default/private/full'

  client = None # gdata.client.GDClient object
  uploader = None # gdata.client.ResumableUploader object

  def __init__(self, filepath, login, passwd, chunk_size=None, convert=None, host=None, ssl=True, debug=False):
    self.client = gdata.docs.client.DocsClient(source=APP_NAME)
    self.client.ssl = ssl
    self.client.http_client.debug = debug
    self.convert = convert

    if host:
      self.client.host = host
    
    if chunk_size:
      self.chunk_size = chunk_size
      
    # Authenticate with ClientLogin
    try:
      self.client.ClientLogin(login, passwd, self.client.source)
    except gdata.client.BadAuthentication:
      exit('Invalid user credentials')
    except gdata.client.Error:
      exit('Login error')

    self.f = open(filepath)
    content_type = gdata.docs.service.SUPPORTED_FILETYPES['ODS'] # hardcode ODS for now
    file_size = os.path.getsize(self.f.name)

    self.uploader = gdata.client.ResumableUploader(
      self.client, self.f, content_type, file_size,
      chunk_size=self.chunk_size, desired_class=gdata.data.GDEntry)

  def __del__(self):
    if self.uploader is not None:
      self.uploader.file_handle.close()

  def upload(self, new_entry):
    """Uploads spreadsheet

    Args:
      new_entry: gdata.data.GDEntry object with metadata to create spreadsheet with

    Returns:
      A gdata.data.GDEntry of the created document on server
    """
    uri = self.CREATE_SESSION_URI

    if self.convert is not None:
      uri += '?convert=' + self.convert

    return self.uploader.UploadFile(uri, entry=new_entry)

try:
  opts, args = getopt.getopt(sys.argv[1:], '', ['name=', 'convert=', 'chunk_size=', 'login=','passwd=','nossl', 'debug', 'format='])
except getopt.error, msg:
  print '''Params:
        --name= [report name to upload]
        --login= [login]
        --passwd= [passwd]
        --convert= ['true' or 'false' (convert to GDocs internal format or not, default 'true')]
        --nossl [disable HTTPS]
        --format= [ods|xlsx], ods is default
        --debug [prints debug info if set]'''
  sys.exit(2)

report_name = None
convert = 'true'
chunk_size = gdata.client.ResumableUploader.DEFAULT_CHUNK_SIZE
debug = False
ssl = True
login = None
passwd = None
file_fmt = 'ods'

for option, arg in opts:
  if option == '--name':
    report_name = arg
  elif option == '--convert':
    convert = arg.lower()
  elif option == '--chunk_size':
    chunk_size = int(arg)
  elif option == '--login':
    login = arg
  elif option == '--passwd':
    passwd = arg
  elif option == '--nossl':
    ssl = False
  elif option == '--debug':
    debug = True
  elif option == '--format':
    file_fmt = arg.lower()

if report_name is None:
  exit('Report name is not given, exiting.')
if login is None:
  exit('No login specified, exiting.')
if passwd is None:
  exit('No password, exiting.')

file = os.getcwd() + "/tmp/" + report_name + "." + file_fmt
up = ODS2GDocsUploader(file, login, passwd, chunk_size=chunk_size, convert=convert, ssl=ssl, debug=debug)
title = report_name

print 'Uploading %s' % up.uploader.file_handle.name
print ' content type: %s' % up.uploader.content_type
print '         size: %s' % up.uploader.total_file_size

entry = up.upload(gdata.data.GDEntry(title=atom.data.Title(text=title)))
print 'Done: %s' % up.uploader.QueryUploadStatus()
print 'Document uploaded: ' + entry.title.text
# print 'Quota used: %s' % entry.quota_bytes_used.text
# .quota_bytes_used attribute is not available for entry object anymore. Changes in gdata lib
